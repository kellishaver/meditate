// Generated by CoffeeScript 1.6.3
(function() {
  var cancelMeditation, clearHistory, delayTimer, formatDigit, getDateRangeList, getMeditations, getSettings, goal, helpTpl, historyTpl, initLocalStorage, interval, minutes, overviewTpl, playSound, saveMeditation, saveSettings, screen, secLeft, seconds, sessionTpl, setBackgroundImage, showHelpScreen, showHistoryScreen, showOverviewScreen, showSessionScreen, startTimer, timeDown, timeUp, toggleTimer;

  helpTpl = $('#instructions-tpl').html();

  overviewTpl = $('#meditation-overview-tpl').html();

  sessionTpl = $('#meditation-session-tpl').html();

  historyTpl = $('#meditation-history-tpl').html();

  goal = 0;

  interval = null;

  minutes = 0;

  screen = $('#screen');

  seconds = 0;

  secLeft = 0;

  delayTimer = null;

  cancelMeditation = function() {
    var timer;
    if (secLeft !== 0) {
      timer = $('#timer');
      clearInterval(interval);
      interval = null;
      delayTimer = null;
      goal = timer.data('goal');
      saveMeditation(goal, goal * 60 - timer.data('sec_left'));
      try {
        window.plugins.insomnia.allowSleepAgain();
      } catch(e) {
        // ...
      }
    }
    return showOverviewScreen();
  };

  clearHistory = function() {
    localStorage.setItem('meditations', JSON.stringify([]));
    return $('#history ul').slideUp();
  };

  formatDigit = function(num) {
    var s;
    s = "00" + num;
    return s.substr(s.length - 2);
  };

  getDateRangeList = function(start, end) {
    var current, retVal;
    addFn(Date.prototype.addDays);
    interval = interval || 1;
    retVal = [];
    current = new Date(start);
    while (current <= end) {
      retVal.push(new Date(current));
      current = addFn.call(current, interval);
    }
    return retVal;
  };

  getMeditations = function() {
    var meditations, res;
    meditations = JSON.parse(localStorage.getItem('meditations'));
    res = meditations.sort(function(a, b) {
      var x, y, _ref, _ref1;
      x = a["timestamp"];
      y = b["timestamp"];
      return (_ref = x < y) != null ? _ref : -{
        1: (_ref1 = x > y) != null ? _ref1 : {
          1: 0
        }
      };
    });
    return res;
  };

  getSettings = function() {
    return JSON.parse(localStorage.getItem('settings'));
  };

  initLocalStorage = function() {
    var meditations, settings;
    meditations = localStorage.getItem('meditations');
    if (meditations === void 0 || meditations === null) {
      localStorage.setItem('meditations', JSON.stringify([]));
    }
    settings = localStorage.getItem('settings');
    if (settings === void 0 || settings === null) {
      settings = {
        last_goal: 10
      };
      return localStorage.setItem('settings', JSON.stringify(settings));
    }
  };

  playSound = function(vol) {
    var ding = new Media('/android_asset/www/audio/ding.mp3',
      function() {
        // ...
      },
      function(err) {
        // ...
      }
    );
    ding.setVolume(vol);
    ding.play();
  };

  saveMeditation = function(goal, duration) {
    var meditation, meditations, timestamp;
    timestamp = new Date().getTime();
    meditation = {
      duration: duration,
      goal: goal,
      timestamp: timestamp
    };
    meditations = JSON.parse(localStorage.getItem('meditations'));
    meditations.push(meditation);
    return localStorage.setItem('meditations', JSON.stringify(meditations));
  };

  saveSettings = function(settings) {
    return localStorage.setItem('settings', JSON.stringify(settings));
  };

  setBackgroundImage = function() {
    var number;
    number = Math.floor(Math.random() * 19) + 1;
    return $('body').css("background-image", "url(./img/" + number + ".jpg)");
  };

  showHelpScreen = function() {
    var parsedTpl;
    parsedTpl = Mark.up(helpTpl);
    return screen.hide().html(parsedTpl).fadeIn('100');
  };

  showOverviewScreen = function() {
    var average, data, duration, m, meditations, parsedTpl, settings, total, _i, _len;
    meditations = getMeditations();
    settings = getSettings();
    total = meditations.length;
    if (total > 0) {
      duration = 0;
      for (_i = 0, _len = meditations.length; _i < _len; _i++) {
        m = meditations[_i];
        duration += m.duration;
      }
      average = Math.floor((duration / total) / 60);
    } else {
      average = 0;
    }
    data = {
      average: average,
      last_goal: settings.last_goal,
      total: total
    };
    parsedTpl = Mark.up(overviewTpl, data);
    return screen.hide().html(parsedTpl).fadeIn('100');
  };

  showSessionScreen = function(g) {
    var data, parsedTpl;
    g = parseFloat(g);
    data = {
      goal: g,
      sec_left: g * 60
    };
    parsedTpl = Mark.up(sessionTpl, data);
    return screen.hide().html(parsedTpl).fadeIn('100');
  };

  showHistoryScreen = function() {
    var ampm, data, date, day, hours, m, meditations, month, months, parsedTpl, year, _i, _len, _ref;
    meditations = getMeditations();
    months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    data = {
      meditations: []
    };
    for (_i = 0, _len = meditations.length; _i < _len; _i++) {
      m = meditations[_i];
      date = new Date(m.timestamp + 86400);
      month = date.getMonth();
      day = date.getDate();
      year = date.getFullYear();
      hours = date.getHours();
      minutes = date.getMinutes();
      if (hours > 12) {
        ampm = "pm";
        hours = hours - 12;
      } else {
        ampm = "am";
      }
      data.meditations.push({
        complete: (_ref = m.duration === (m.goal * 60)) != null ? _ref : {
          "true": false
        },
        date: "" + months[month] + " " + day + ", " + year + " at " + hours + ":" + minutes + ampm,
        duration: Math.floor(parseFloat(m.duration) / 60),
        goal: m.goal
      });
    }
    parsedTpl = Mark.up(historyTpl, data);
    return screen.hide().html(parsedTpl).fadeIn('100');
  };

  startTimer = function() {
    var timer;
    try {
      window.plugins.insomnia.keepAwake();
    } catch(e) {
      // .....
    }    
    timer = $('#timer');
    goal = parseFloat(timer.data('goal'));
    secLeft = parseFloat(timer.data('sec_left'));
    minutes = Math.floor(secLeft / 60);
    seconds = secLeft % 60;
    $('#timer .minutes').text(minutes);
    $('#timer .seconds').text(formatDigit(seconds));
    playSound('0.25');
    return delayTimer = setTimeout(function() {
      return interval = setInterval(function() {
        delayTimer = null;
        if (secLeft > 0) {
          if (secLeft === goal * 60) {
            playSound('0.75');
          }
          if (seconds === 0) {
            minutes = minutes - 1;
            seconds = 59;
          } else {
            seconds = seconds - 1;
          }
          secLeft = secLeft - 1;
          if (secLeft === 0) {
            playSound('0.75');
          }
          $('#timer').data('sec_left', secLeft);
          $('#timer .minutes').text(minutes);
          return $('#timer .seconds').text(formatDigit(seconds));
        } else {
          clearInterval(interval);
          interval = null;
          delayTimer = null;
          goal = $('#timer').data('goal');
          saveMeditation(goal, goal * 60);
          try {
            window.plugins.insomnia.allowSleepAgain();
          } catch(e) {
            // ...
          }
          return showHistoryScreen();
        }
      }, 1000);
    }, 20000);
  };

  timeDown = function() {
    var t, time;
    time = $('#current-goal');
    t = parseFloat(time.text());
    if (t > 0) {
      t--;
      time.text(t);
      return saveSettings({
        last_goal: t
      });
    }
  };

  timeUp = function() {
    var t, time;
    time = $('#current-goal');
    t = parseFloat(time.text());
    if (t < 60) {
      t++;
      time.text(t);
      return saveSettings({
        last_goal: t
      });
    }
  };

  toggleTimer = function() {
    if (delayTimer === null) {
      if (interval === null) {
        $('#session .message, #session .cancel').fadeOut();
        return startTimer();
      } else {
        $('#session .message, #session .cancel').fadeIn();
        clearInterval(interval);
        return interval = null;
      }
    }
  };

  initLocalStorage();

  setBackgroundImage();

  showOverviewScreen(2);

  $('body').on('click', '#timer', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return toggleTimer();
  }).on('click', '#overview .help', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return showHelpScreen();
  }).on('click', '#overview .history', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return showHistoryScreen();
  }).on('click', '#overview .start', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return showSessionScreen($('#current-goal').text());
  }).on('click', '#session .cancel', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return cancelMeditation();
  }).on('click', '.back', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return showOverviewScreen();
  }).on('click', '#history .clear', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return clearHistory();
  }).on('click', '.up', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return timeUp();
  }).on('click', '.down', function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();
    return timeDown();
  });

}).call(this);
